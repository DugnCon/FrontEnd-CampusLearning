/*-----------------------------------------------------------------
* File: app.js
* Author: Quyen Nguyen Duc
* Date: 2025-07-24
* Description: This file is part of the user backend service.
* Apache 2.0 License - Copyright 2025 Quyen Nguyen Duc
-----------------------------------------------------------------*/
const express = require('express');
const mongoose = require('mongoose');
const cors = require('cors');
const dotenv = require('dotenv');
const morgan = require('morgan');
const helmet = require('helmet');
const compression = require('compression');
const path = require('path');
const fs = require('fs');
const { createProxyMiddleware } = require('http-proxy-middleware');
const { authenticateToken } = require('./middleware/auth');
const { runMigration: runSSHGPGMigration } = require('./utils/run-ssh-gpg-migration');

// Load environment variables first
dotenv.config();

// Ensure a default JWT secret is always available (keeps tokens generated by other services compatible)
if (!process.env.JWT_SECRET) {
  console.warn('JWT_SECRET not found in environment, falling back to default "secret_key"');
  process.env.JWT_SECRET = 'secret_key';
}

// Initialize database models and setup associations
const db = require('./models/index');
db.sequelize.authenticate()
  .then(() => {
    console.log('Connected to database');
    // Set up model associations after successful authentication
    db.setupAssociations();
    
    // Run migrations
    runSSHGPGMigration()
      .then(() => console.log('SSH and GPG tables ready'))
      .catch(err => console.error('Error setting up SSH and GPG tables:', err));
  })
  .catch(err => {
    console.error('Database connection error:', err);
  });

// Load routes after models are initialized
const authRoutes = require('./routes/authRoutes');
const userRoutes = require('./routes/userRoutes');
const postRoutes = require('./routes/postRoutes');
const eventRoutes = require('./routes/eventRoutes');
const chatRoutes = require('./routes/chatRoutes');
const courseRoutes = require('./routes/courseRoutes');
const examRoutes = require('./routes/examRoutes');
const notificationRoutes = require('./routes/notificationRoutes');
const commentRoutes = require('./routes/commentRoutes');
const reportRoutes = require('./routes/reportRoutes');
const settingsRoutes = require('./routes/settingsRoutes');
const rankingRoutes = require('./routes/rankingRoutes');
const storyRoutes = require('./routes/storyRoutes');
const callRoutes = require('./routes/callRoutes');
const codeExecutionRoutes = require('./routes/codeExecutionRoutes');
const friendshipRoutes = require('./routes/friendshipRoutes');
const aiRoutes = require('./routes/aiRoutes');
const competitionRoutes = require('./routes/competitionRoutes');
const searchRoutes = require('./routes/searchRoutes');
const passkeyRoutes = require('./routes/passkeyRoutes');
const verificationRoutes = require('./routes/verificationRoutes');
const paymentRoutes = require('./routes/paymentRoutes');
const unlockRoutes = require('./routes/unlockRoutes');
const twoFARoutes = require('./routes/twoFARoutes');
const app = express();
// trust proxy so req.ip respects X-Forwarded-For
app.set('trust proxy', true);

// Initialize in-memory caches
app.locals.conversationCache = {};

// Cache cleanup interval (every 15 minutes)
setInterval(() => {
  console.log('Running cache cleanup...');
  const now = Date.now();
  
  // Clean up conversation cache
  if (app.locals.conversationCache) {
    let expiredCount = 0;
    Object.keys(app.locals.conversationCache).forEach(key => {
      const cacheEntry = app.locals.conversationCache[key];
      // Remove entries older than 15 minutes
      if (now - cacheEntry.timestamp > 15 * 60 * 1000) {
        delete app.locals.conversationCache[key];
        expiredCount++;
      }
    });
    if (expiredCount > 0) {
      console.log(`Removed ${expiredCount} expired conversation cache entries`);
    }
  }
}, 15 * 60 * 1000); // 15 minutes

// Middleware
app.use(cors({
  origin: function(origin, callback) {
    const allowedOrigins = ['http://localhost:3000', 'http://localhost:5004', 'http://localhost:5173'];
    const isDevelopment = process.env.NODE_ENV === 'development';
    
    // Allow requests with no origin (like mobile apps or curl requests)
    if (!origin) return callback(null, true);
    
    if (isDevelopment || allowedOrigins.indexOf(origin) !== -1) {
      callback(null, true);
    } else {
      callback(new Error('Not allowed by CORS'));
    }
  },
  credentials: true,
  methods: ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS', 'PATCH'],
  allowedHeaders: ['Content-Type', 'Authorization', 'X-Requested-With', 'X-HTTP-Method-Override', 'Accept', 'cache-control']
}));
app.use(morgan('dev'));
app.use(helmet({
  crossOriginResourcePolicy: { policy: 'cross-origin' }
}));
app.use(compression());
app.use(express.json());
app.use(express.urlencoded({ extended: true }));

// Proxy route for code-server UI, enforce user login
app.use('/ide', authenticateToken, createProxyMiddleware({
  target: 'http://127.0.0.1:8080',
  changeOrigin: true,
  ws: true,
  pathRewrite: { '^/ide': '' },
}));

// Logging middleware for all requests
app.use((req, res, next) => {
  console.log(`${req.method} ${req.url}`);
  
  // If it's a course details request, log additional information
  if (req.url.match(/^\/api\/courses\/\d+/) || req.url.match(/^\/api\/courses\/[a-zA-Z0-9-]+$/)) {
    if (req.method === 'GET' && !req.url.includes('/check-enrollment') && !req.url.includes('/content')) {
      console.log('=== COURSE DETAILS DEBUG ===');
      console.log('Full URL:', req.url);
      console.log('Headers:', JSON.stringify({
        authorization: req.headers.authorization ? 'Present' : 'Not present',
        'content-type': req.headers['content-type'],
        'user-agent': req.headers['user-agent']
      }));
    }
  }
  
  next();
});

// Cấu hình static files - di chuyển lên trước routes
app.use('/uploads', express.static(path.join(__dirname, 'uploads')));
app.use('/uploads/stories', express.static(path.join(__dirname, 'uploads/stories')));
app.use('/uploads/chat', express.static(path.join(__dirname, 'uploads/chat')));

// Routes
app.use('/api/auth', authRoutes);
app.use('/api/users', userRoutes);
app.use('/users', authenticateToken, userRoutes);
app.use('/api/posts', postRoutes);
app.use('/api/events', eventRoutes);
app.use('/api/chat', chatRoutes);
app.use('/api', courseRoutes);
app.use('/api/exams', examRoutes);
app.use('/api/notifications', notificationRoutes);
app.use('/api/comments', commentRoutes);
app.use('/api/reports', reportRoutes);
app.use('/api/settings', settingsRoutes);
app.use('/api/rankings', rankingRoutes);
app.use('/api/stories', storyRoutes);
app.use('/api/calls', callRoutes);
app.use('/api', codeExecutionRoutes);
app.use('/api/friendships', friendshipRoutes);
app.use('/api/ai', aiRoutes);
app.use('/api', competitionRoutes);
app.use('/api/passkeys', passkeyRoutes);
// Global search route
app.use('/api', searchRoutes);
app.use('/api/verification', verificationRoutes);
app.use('/api/payments', paymentRoutes);
app.use('/api/unlock', unlockRoutes);
app.use('/api/2fa', twoFARoutes);

// Direct route handler for /calls/active to fix 404 error
app.get('/calls/active', (req, res) => {
  // Redirect to the proper endpoint
  const callController = require('./controllers/callController');
  return callController.getActiveCalls(req, res);
});

// Log all registered routes for debugging
console.log('Registered routes:');
app._router.stack.forEach(middleware => {
  if (middleware.route) { // routes registered directly on the app
    console.log(`${Object.keys(middleware.route.methods)} ${middleware.route.path}`);
  } else if (middleware.name === 'router') { // router middleware
    middleware.handle.stack.forEach(handler => {
      if (handler.route) {
        const path = handler.route.path;
        const methods = Object.keys(handler.route.methods).join(',').toUpperCase();
        console.log(`${methods} /api${path}`);
      }
    });
  }
});

// Health check route
app.get('/health', (req, res) => {
  res.json({ status: 'OK', timestamp: new Date() });
});

// Fallback route for participant answers - backward compatibility
app.get('/api/participants/:participantId/answers', (req, res) => {
  // Forward the request to the exam routes handler
  console.log('Redirecting from /api/participants/:participantId/answers to /api/exams/participants/:participantId/answers');
  req.url = `/exams/participants/${req.params.participantId}/answers`;
  app._router.handle(req, res);
});

// Error handler
app.use((err, req, res, next) => {
  console.error('=== ERROR HANDLER CAUGHT ===');
  console.error(err.stack || err);
  
  // Log full error details including SQL errors and query information
  if (err.code === 'EREQUEST') {
    console.error('=== SQL ERROR DETAILS ===');
    console.error('SQL Error Number:', err.number);
    console.error('SQL Error State:', err.state);
    console.error('SQL Error Line Number:', err.lineNumber);
    console.error('SQL Error Message:', err.originalError?.message);
    if (err.precedingErrors) {
      console.error('SQL Preceding Errors:');
      err.precedingErrors.forEach((pe, i) => {
        console.error(`  Error ${i+1}:`, pe.message || pe);
      });
    }
  }
  
  res.status(err.status || 500).json({
    success: false,
    message: process.env.NODE_ENV === 'development' ? err.message : 'Internal server error'
  });
});

// Handle 404
app.use((req, res) => {
  res.status(404).json({
    message: 'Route not found'
  });
});

// Đảm bảo thư mục uploads tồn tại
const uploadDirs = [
  'uploads', 
  'uploads/images', 
  'uploads/videos', 
  'uploads/chat', 
  'uploads/chat/documents',
  'uploads/chat/images',
  'uploads/chat/videos',
  'uploads/chat/audio',
  'uploads/stories/images', 
  'uploads/stories/videos'
];
uploadDirs.forEach(dir => {
  if (!fs.existsSync(dir)) {
    fs.mkdirSync(dir, { recursive: true });
  }
});

module.exports = app; 
